---
title: "Analyses Section 4: Temporal Trends"
html:
  embed-resources: true
format: html
---

# ‚≠êÔ∏è Overview

## This File

This file performs the initial explorations and analyses of Temporal Trends within the MedStar 5-year follow-up data, internally referred to as "Section 4: Temporal Trends".

## MedStar Data Background

The MedStar records were originally recorded in Filemaker Pro. Processing of this data was extensive and across multiple data files. These files are documented in the [wiki](https://github.com/brad-cannell/detect_fu_interviews_public/wiki).

The primary files of interest for subject-level interest included participant demographic data in the `participant_import.rds` file [created in a separate Quarto file](https://github.com/brad-cannell/detect_fu_interviews_public/blob/main/data_management/data_01_participant_import.qmd), and the original within-set unique subject ID assignment in `participant_unique_ids.rds` file [created in a separate Quarto file](https://github.com/brad-cannell/detect_fu_interviews_public/blob/main/data_management/unique_person_identification/data_02_unique_person_detect_fu_data.qmd).

These files originally contained 92,160 observations of approximately 30 demographic variables. Refinement of unique subject ID assignments in subject-linkage to APS resulted in 41,955 values of `ms_id`.

## Internal Files

This document was created as part of the DETECT project, specifically the merger of APS and MedStar data for analysis using the full follow-up period data. Internal documents relating to these files, which contain PHI, are securely stored on the research group's SharePoint in the [task notes folder](https://uthtmc.sharepoint.com/:f:/r/sites/SPHDETECT-RPC/Shared%20Documents/DETECT%20R01%202018/02%20Shared%20Folders/DETECT%20Follow-up%20Interview%20Data%20Shared/data/notes_documents?csf=1&web=1&e=gLWUzJ).

Notes for the MedStar data are located in the [notes_00_data_medstar.docx](https://uthtmc.sharepoint.com/:w:/r/sites/SPHDETECT-RPC/Shared%20Documents/DETECT%20R01%202018/02%20Shared%20Folders/DETECT%20Follow-up%20Interview%20Data%20Shared/data/notes_documents/notes_00_data_medstar.docx?d=w7367b418df5644fbb3ff5117908f27d9&csf=1&web=1&e=gueXsZ) file.

Please note: as these files contain PHI and proprietary information, they are not publicly available. Links are internal to the research team.

# üì¶ Load Packages and Functions

## Library Imports

```{r}
#| label: imports-libraries
#| warning: FALSE
suppressPackageStartupMessages({
  library(tidyverse)
  library(here)
  library(janitor, include.only = "clean_names")
})
```

### Versioning

This file was created with:

-   R version 4.4.1 ("Race for Your Life").
-   tidyverse version 2.0.0, including all attached packages
-   here version 1.0.1
-   janitor version 2.2.0
-   stats version 4.4.1

## Functions

```{r}
#| label: imports-functions
# Function to reduce code repetition in informative imports of data
source(here::here("r", "informative_df_import.R"))

# Function that creates a modified version of table output, allowing
# simplified manual review of unique values in a given column or set of
# columns
source(here::here("r", "get_unique_value_summary.R"))

# Function that creates a text-based, human-legible summary statistic table
# for a numeric column
source(here::here("r", "get_cont_summary.R"))
# Function that wraps "get_cont_summary()" to process multiple groups at once.
source(here::here("r", "get_group_cont_summary.R"))

# Function that creates a text-based, human-legible summary statistic table
# for a categorical column
source(here::here("r", "get_cat_summary.R"))
# Function that wraps "get_cat_summary()" to process multiple groups at once.
source(here::here("r", "get_group_cat_summary.R"))

## Function that performs 2-Category Chi-Square and Fisher Exact and produces
## a human-legible summary table
source(here::here("r", "get_chi_fisher.R"))

## Function that performs 2-category T-Test and Wilcox Rank-Sum test and 
## produces a human-legible summary table
source(here::here("r", "get_twos_num_stats.R"))

## Function that extracts response pattern tables from DETECT variables
source(here::here("r", "get_dt_resp_pattern.R"))

## Function that performs Chi-Square and Fisher's Exact on DETECT Response
## Patterns, by Item
source(here::here("r", "get_dt_rp_chi_fisher.R"))

## Function that extracts a reduced tibble that gives the count of "TRUE"
## values in binary/logical columns, by a grouping variable
source(here::here("r", "binary_count_group.R"))
```

# üì• Load Data

## MedStar Data

We loaded our MedStar record-level data.

```{r}
#| label: load-ms-records
# Load MedStar Record Level Data
## Path to data
path <- here::here(
    "data", "cleaned_rds_files", "analysis", 
    "medstar_01_record-lvl.rds"
    )

## Load
informative_df_import(
    "ms_records", path, overwrite = T
  )

# [Placeholder]
```

# Analyses

We set the path to where we wished to save our plot files.

```{r}
#| label: set-plot-path
# Set path to directory to save plot image files
plot_path <- paste0(here::here('data', 'figs'), '/')
```

We set the order and labels for values in categorical variables we may use in temporal trends plots.

```{r}
#| label: set-value-orders
# Set order and labels for values in categorical variables that may be used
# in plots

## Screening result value order (Negative screens outnumber Positive)
screen_result_order <- list(
  screen = "Screenings Completed (Any Result)", 
  negative = "Negative Screenings", 
  positive = "Positive Screenings"
  )

## Sex value order
sex_val_list = list(
    male = 'Male', female = 'Female', uta = 'Unable to Assess', 
    missing = 'Missing (NA)'
    )

## Race value order
race_val_list = list(
  white = "White", black = "Black or African American", asian = "Asian", 
  nhpi = "Native Hawaiian or Other Pacific Islander", 
  aian = "American Indian or Alaska Native", 
  mena = "Middle Eastern or North African", 
  other = "Other Race", multiracial = "Multiracial", missing = "Missing (NA)"
  )

## Hispanic Ethnicity value order
hispanic_val_list = list(
  hispanic = 'Hispanic or Latino', nonhispanic = 'Not Hispanic or Latino', 
  missing = 'Missing (NA)'
  )

## DETECT Tool Variable Item Order
dt_item_list <- list(
  dt_env_odor = "Unusual odor (e.g., urine, feces)", 
  dt_env_hoard = paste0(
    "Inside of the home is in extreme disarray or there is hoarding"
    ), 
  dt_env_concern = paste0(
    "Living environment poses a health or safety concern (e.g., fire hazard,",
    " insect or rodent infestation, or urine or feces present)"
    ), 
  dt_pt_isolated = "Is the patient or older adult isolated in the home?", 
  dt_pt_hygiene = paste0(
    "Does the patient or older adult have poor personal hygiene",
    " (including soiled in urine or feces)?"
    ), 
  dt_pt_clothes = paste0(
    "Is the patient or older adult inadequately clothed or wearing",
    " dirty, torn, or soiled clothing?"
    ), 
  dt_pt_needs = paste0(
    "Does the patient or older adult have unmet needs for assistance",
    " with eating, toileting, transferring, dressing, or bathing?"
    ), 
  dt_pt_depress = paste0(
    "Does the patient or older adult appear depressed, anxious, or ",
    "emotionally distressed for reasons other than their immediate medical",
    " condition?"
    ), 
  dt_pt_med_hoard = paste0(
    "Does the patient or older adult appear to be hoarding or saving old",
    " medications?"), 
  dt_pt_med_diff = paste0(
    "Does the patient or older adult have difficulties taking their",
    " prescribed medications as directed?"
    ), 
  dt_cg_lack = paste0(
    "If caregiver is present, they appear to lack knowledge of the",
    " patient or older adult‚Äôs medical needs"
    ), 
  dt_cg_uneng = paste0(
    "If caregiver is present, they appear unengaged and inattentive in",
    " caring for the patient or older adult"
    ), 
  dt_cg_frust = paste0(
    "If caregiver is present, they appear frustrated, tired, angry, or ",
    "burdened by the patient or older adult"
    ), 
  dt_cg_anx = paste0(
    "If caregiver is present, they appear overly concerned ",
    "(e.g., anxious, hovering)")
  )
```

## Section 4: Temporal Trends

We wished to analyse our temporal trends at the study month level.

```{r}
#| label: sec4-add-month
# Create Month-data backbone
## Add Study Month variable to the records data.
ms_records <- ms_records |>
    ## Calculate study month
    dplyr::mutate(
      month = 1 + lubridate::interval(
        '2019-07-01', 
        lubridate::as_date(incident_timestamp)
        ) %/% months(1)
    )

## Extract table of constants: N records, N screenings, n positive screenings
month_df <- binary_count_group(
  ms_records, "month", c("dt_screened", "dt_positive")
  ) |>
  dplyr::rename_at(
    c("dt_screened", "dt_positive", "num_rows"), 
    ~c("n_screen", "n_positive", "total")
    )
```

### Screening Completion Rate, by Month 

#### Figure 4.1: Screening Completion Rate, by Month (#sec4-f1-screen-rate-month)

We examined our screening completion rate, by month.

```{r}
#| label: sec4-f1-screen-rate-month-plot
# Plotting Screening Rate per Month
## Create dataframe for the plot
plot_df <- month_df |>
  dplyr::mutate(
    rate = n_screen / total,
    min_rate = rate == min(rate)
  )

## Create plot
plot <- ggplot2::ggplot(
  data = plot_df, 
  ggplot2::aes(x = month, y = rate)
  ) + 
  ggplot2::geom_line() +
  ### Convert y-axis scale to a percent
  ggplot2::scale_y_continuous(labels = scales::percent) +
  ### Add a purple dot at the points with the lowest rate
  ggplot2::geom_point(size = 1, ggplot2::aes(colour = factor(min_rate))) +
  ggplot2::scale_color_manual(values = c('black', 'purple')) +
  ggplot2::theme(legend.position = 'none') +
  ### Labels
  ggplot2::labs(
    title="DETECT Screening Rate by Study Month",
    x= "Study Month", 
    y = "Screening Rate (% of Responses)",
    #### Add the lowest rate month(s) in the caption.
    caption = paste0(
      "Minimum rate at month(s): ", 
      paste(plot_df[plot_df$min_rate,]$month, collapse = ', ')
      )
    )

## Save plot
ggplot2::ggsave(
  filename = paste0(
    plot_path,
    'f4-1-screen-rate-month.png'
    ),
  plot = plot
  )

## Display plot
plot
```

### Screening Results, by Month

We obtained the count and percent of our overall screening completion, as well as positive and negative results of screenings. A positive screening was defined as at least one "yes" response to a DETECT item question.

```{r}
#| label: sec4-screen-rate-month-bytype-calc
# Plotting Screening Results
## Create dataframe with count and percents - positive, negative results
plot_df <- month_df |> 
  dplyr::select(-total) |>
  ### Calculate negative screens as total screens - positive screens
  dplyr::mutate(
    n_negative = n_screen - n_positive,
    ### Use number of screens as denominator for result rates
    per_positive = n_positive / n_screen,
    per_negative = n_negative / n_screen
  ) |>
  ### Shift so that each row is MONTH - TYPE - COUNT - PERCENT 
  tidyr::pivot_longer(
    cols = dplyr::all_of(
      c(dplyr::starts_with("n_"), dplyr::starts_with("per_"))
      ),
    names_to = c(".value", "group_val"),
    names_pattern = "(.*)_(.*)"
  )

## Pull order for our group variables
group_var_order <- screen_result_order
```

#### Figure 4.2: Counts (#sec4-f2-result-month-count)

We examined our screening counts per month, by result type.

```{r}
#| label: sec4-f2-result-month-count-plot
# Plotting Screening Rate per Month
## Make Plot
plot <- ggplot2::ggplot(
  data = plot_df |>
    ### Apply group variable labels/order
  dplyr::mutate(
    group_val = factor(
      group_val, 
      levels = names(group_var_order), 
      labels = as.character(group_var_order)
      )
    ), 
  ggplot2::aes(x = month, y = n, fill = group_val)
  ) + 
  ### Ribbon to use lines that fill the area under the line
  ggplot2::geom_ribbon(ggplot2::aes(ymin = 0, ymax = n, fill = group_val)) +
  ### Labels
  ggplot2::labs(
    title="DETECT Screening Count by Study Month",
    x= "Study Month", 
    y = "Screening Count",
    fill = "Screening Result Type"
    ) +
  ### Color Palette
  ggplot2::scale_fill_brewer(palette = "Paired")

## Save plot
ggplot2::ggsave(
  filename = paste0(
    plot_path,
    'f4-2-result-month-count.png'
    ),
  plot = plot
  )

## Display plot
plot
```

#### Figure 4.3: Rates (#sec4-f3-result-month-rate)

We examined our screening result rates per month, by result type.

```{r}
#| label: sec4-f3-result-month-rate-plot
# Plotting Screening Rate per Month 
## Create plot
plot <- ggplot2::ggplot(
  data = plot_df |>
    ### Omit total screenings from this plot
  dplyr::filter(group_val != 'screen') |>
    ### Apply group variable labels/order
  dplyr::mutate(
    group_val = factor(
      group_val, 
      levels = names(group_var_order), 
      labels = as.character(group_var_order)
      )
    ), 
  ggplot2::aes(x = month, y = per, fill = group_val)
  ) + 
  ### Stacked area plot
  ggplot2::geom_area(alpha = 0.8) +
  ### Labels
  ggplot2::labs(
    title="DETECT Screening Result Rates, by Month",
    x= "Study Month", 
    y = "Screening Rate (% of Screenings)",
    fill = "Screening Result Type"
    ) +
  ### Color Palette
  ggplot2::scale_fill_brewer(palette = "Paired")

## Save plot
ggplot2::ggsave(
  filename = paste0(
    plot_path,
    'f4-3-result-month-rate.png'
    ),
  plot = plot
  )

## Display plot
plot
```


### DETECT Item Rates, by Month

#### Figure 4.5: Item Completion Rates, All Screenings

#### Item Yes Rates, by Month

##### Figure 4.6: All Screenings

##### Figure 4.7: Positive Screenings

#### Reporting Intent Rates, by Month

##### Figure 4.8: All Screenings

##### Figure 4.9: Positive Screenings

##### Figure 4.10: Negative Screenings

# üßπ Clean up

```{r}
#| label: end-cleanup
rm(list=ls())
```