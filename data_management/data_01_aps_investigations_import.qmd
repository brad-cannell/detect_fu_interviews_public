---
title: "Import Data from FileMaker Pro: APS Investigations"
---

# Overview

In this file, we import and do some initial cleaning of the APS Investigations data collected and stored in FileMaker Pro.


# Load packages

```{r}
library(dplyr, warn.conflicts = FALSE)
library(purrr)
library(stringr)
library(janitor, warn.conflicts = FALSE)
```


# Load custom functions

```{r}
source(here::here("R", "recoding_factoring_relocating.R"))
source(here::here("R", "nums_to_na.R"))
```


# Load data

Load the data table into the global environment as a data frame using the raw csv file. See this Wiki page for more information about the location of the data: https://github.com/brad-cannell/detect_fu_interviews_public/wiki. 

```{r}
aps_inv_path <- here::here("data", "filemaker_pro_exports", "aps_investigations_import.csv")
```

```{r}
aps_inv <- readr::read_csv(aps_inv_path)
```

## Data check

The initial number of rows and columns.

```{r}
# Data check
dims <- c(951, 18)
if (nrow(aps_inv) != dims[1] || ncol(aps_inv) != dims[2]) {
  stop(
    "Expecting ", dims[1], " rows and ", dims[2], " columns in aps_inv. Found ",
    paste(dim(aps_inv), collapse = ", "), " instead. Check into it."
  )
}
```


# Data cleaning

## Convert all variable names to snake case

```{r}
aps_inv <- clean_names(aps_inv)
```

## Clean categorical variables

- By default, FM Pro exports all categorical variables as character variables.
- When analyzing data in R, we prefer to work factors and occasionally with numeric values.
- Below, we:
  - Convert character values to numeric values
  - Create a version of each column with "Don't know" and "Refused" converted to NA
  - Create a factor version of each column (w/o "Don't know" and "Refused")
  - Arrange the columns as: original column, numeric column w/o "Don't know" and "Refused", 
    and the factor version of the column.
    
#### Columns with Yes/No responses
    
```{r}
# Columns of interest for this code chunk 
cols <- c("aps_report")

# Numeric coding for character values in each column of interest
value_labels <- c("No" = 0, "Yes" = 1, "Don't know" = 7, "Refused" = 9)

# Numeric values to convert to NA in each column of interest
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "2cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
aps_inv <- aps_inv |>
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  # Create a factor version of each column (w/o "Don't know" and "Refused")
  factors(cols_suffix, factor_labs_levs) |> 
  # Relocate factor columns immediately after the new columns with NA values
  relocate_factors(cols_suffix)
```

#### Columns with number of times responses

```{r}
# Columns of interest for this code chunk 
cols <- c("aps_times")

# Numeric coding for character values in each column of interest
value_labels <- c("0" = 0, "1" = 1, "2+" = 2, "Don't know" = 7, "Refused" = 9)

# Numeric values to convert to NA in each column of interest
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "3cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
aps_inv <- aps_inv |>
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  # Create a factor version of each column (w/o "Don't know" and "Refused")
  factors(cols_suffix, factor_labs_levs) |> 
  # Relocate factor columns immediately after the new columns with NA values
  relocate_factors(cols_suffix)
```

#### How long ago columns

```{r}
# Columns of interest for this code chunk 
cols <- c("aps_first", "aps_recent")

# Numeric coding for character values in each column of interest
value_labels <- c(
  "In the past week" = 1, "In the past month" = 2,
  "In the past year but more than a month ago" = 3, "1-5 years ago" = 4,
  "5-10 years ago" = 5, "10 or more years ago" = 6, "Donâ€™t know" = 7, 
  "Refused" = 9
)

# Numeric values to convert to NA in each column of interest
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "6cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
aps_inv <- aps_inv |>
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  # Create a factor version of each column (w/o "Don't know" and "Refused")
  factors(cols_suffix, factor_labs_levs) |> 
  # Relocate factor columns immediately after the new columns with NA values
  relocate_factors(cols_suffix)
```

### Data check

Number of columns after cleaning the categorical variables.

```{r}
# Data check
ncols <- 26
if (ncol(aps_inv) != ncols) {
  stop(
    ncols, " columns expected in aps_inv after cleaning the categorical variables. ", 
    ncol(aps_inv), " columns found. Check into it."
  )
}
```


# Save as rds file

```{r}
aps_inv_path <- here::here("data", "cleaned_rds_files", "aps_investigations_import.rds")
```

```{r}
readr::write_rds(aps_inv, aps_inv_path)
```


# Clean up

```{r}
rm(list = ls())
```

