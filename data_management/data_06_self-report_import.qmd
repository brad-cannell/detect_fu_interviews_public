---
title: "Import Data from FileMaker Pro: Self Report"
---

# Overview

In this file, we import and do some initial cleaning of the EM self-report data collected and stored in FileMaker Pro.


# Load packages

```{r, message= FALSE}
# Load all necessary libraries
library(dplyr, warn.conflicts = FALSE)
library(janitor, warn.conflicts = FALSE)
library(stringr)
```


# Load custom functions

```{r}
source(here::here("R", "recoding_factoring_relocating.R"))
source(here::here("R", "nums_to_na.R"))
```


# Load data

Load the data table into the global environment as a data frame using the raw csv file. See this Wiki page for more information about the location of the data: https://github.com/brad-cannell/detect_fu_interviews_public/wiki. 

```{r}
self_rep_path <- here::here("data", "filemaker_pro_exports", "self_report_import.csv")
```

```{r}
self_rep <- readr::read_csv(self_rep_path)
rm(self_rep_path)
```

## Data check

The initial number of rows and columns.

```{r}
# Data check
dims <- c(956, 209)
if (nrow(self_rep) != dims[1] || ncol(self_rep) != dims[2]) {
  stop(
    "Expecting ", dims[1], " rows and ", dims[2], " columns in self_rep. Found ",
    paste(dim(self_rep), collapse = ", "), " instead. Check into it."
  )
}
```


# Data cleaning

Here we will convert all variable names to snake case so that everything is uniform.

```{r}
self_rep <- clean_names(self_rep,
  replace = c(
    "60" = "_60",
    "65" = "_65"
  )
)
```

## Filter rows

There is one row that is missing a MedStar ID and almost all other variables. My best guess is that this was a record Sunil was experimenting with. We will drop the row.

```{r}
self_rep <- self_rep |> 
  filter(!is.na(medstar_id))
```

```{r}
# Data check
dim(self_rep) # 955 209
```

For MedStar ID ...6bbcf, No consent given. There was no follow-up interview scheduled. There weren't any items checked in any of the follow-up interview survey instruments. However, "Don't know" and "unknown" are showing up as as values in the fears, needs, and wants questions from the self-report of injury, violence, neglect, and exploitation follow-up interview survey instrument. I think this is just an artifact of how those variables are being cleaned. We will delete this record.

For MedStar ID ...b427b, No consent given. There was no follow-up interview scheduled. There weren't any items checked in any of the follow-up interview survey instruments. However, "Don't know" and "unknown" are showing up as as values in the fears, needs, and wants questions from the self-report of injury, violence, neglect, and exploitation follow-up interview survey instrument. I think this is just an artifact of how those variables are being cleaned. We will delete this record.

```{r}
self_rep <- self_rep |>
  filter(!stringr::str_detect(medstar_id, "6bbcf")) |> 
  filter(!stringr::str_detect(medstar_id, "b427b"))
```

```{r}
# Data check
dim(self_rep) # 953 209
```

## Clean categorical variables

- By default, FM Pro exports all categorical variables as character variables.
- When analyzing data in R, we prefer to work factors and occasionally with numeric values.
- Below, we:
  - Convert character values to numeric values
  - Create a version of each column with "Don't know" and "Refused" converted to NA
  - Create a factor version of each column (w/o "Don't know" and "Refused")
  - Arrange the columns as: original column, numeric column w/o "Don't know" and "Refused", 
    and the factor version of the column.

### Neglect variables

#### Columns with Yes/No responses

```{r}
# Columns of interest for this code chunk
cols <- c(
  "neglect_go", "neglect_food", "neglect_house", "neglect_clean", "neglect_ready", 
  "neglect_bills"
)

# Numeric coding for character values in each column of interest
value_labels <- c("No" = 0, "Yes" = 1, "Don't know" = 7, "Refused" = 9)

# Numeric values to convert to NA in each column of interest
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "2cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
self_rep <- self_rep |> 
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  # Create a factor version of each column (w/o "Don't know" and "Refused")
  factors(cols_suffix, factor_labs_levs) |> 
  # Relocate factor columns immediately after the new columns with NA values
  relocate_factors(cols_suffix)
```

#### Columns with number of people responses

```{r}
# Columns of interest for this code chunk
cols <- c(
  "neglect_go_help", "neglect_food_help", "neglect_house_help", "neglect_clean_help", 
  "neglect_ready_help", "neglect_bills_help"
)

# Numeric coding for character values in each column of interest
value_labels <- c(
  "Yes, one person" = 1, "Yes, more than one person" = 2, "No" = 0,
  "Don’t know" = 7, "Refused" = 9
)

# NA values
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "3cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
self_rep <- self_rep |>
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  # Create a factor version of each column (w/o "Don't know" and "Refused")
  factors(cols_suffix, factor_labs_levs) |> 
  # Relocate factor columns immediately after the new columns with NA values
  relocate_factors(cols_suffix)
```

#### Columns with reliability responses

```{r}
# Columns of interest for this code chunk
cols <- c(
  "neglect_go_reliable", "neglect_food_reliable", "neglect_house_reliable", 
  "neglect_clean_reliable", "neglect_ready_reliable", "neglect_bills_reliable"
)

# Numeric coding for character values in each column of interest
value_labels <- c(
  "Not at all reliable" = 1, "Somewhat reliable" = 2,
  "Very reliable" = 3, "Completely reliable" = 4, "Don’t know" = 7,
  "Refused" = 9
)

# NA values
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "4cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
self_rep <- self_rep |>
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  # Create a factor version of each column (w/o "Don't know" and "Refused")
  factors(cols_suffix, factor_labs_levs) |> 
  # Relocate factor columns immediately after the new columns with NA values
  relocate_factors(cols_suffix)
```

#### Person column

Participants were allowed to choose more than one person during the interview. Since some people chose more than one person for these questions, a dummy variable was created. 

```{r}
# Create dummy variables for person categories 1 = TRUE 0 = FALSE
self_rep <- self_rep |> 
  mutate(
    neglect_person_spouse         = str_detect(neglect_person, "A spouse or partner"),
    neglect_person_ex_partner     = str_detect(neglect_person, "An ex-spouse or parner"),
    neglect_person_parent         = str_detect(neglect_person, "A parent or step-parent"),
    neglect_person_sibling        = str_detect(neglect_person, "A brother or sister"),
    neglect_person_child          = str_detect(neglect_person, "A son or daughter"),
    neglect_person_other_relative = str_detect(neglect_person, "Another relative"),
    neglect_person_coworker       = str_detect(neglect_person, "A coworker"),
    neglect_person_neighbor       = str_detect(neglect_person, "A neighbor"),
    neglect_person_friend         = str_detect(neglect_person, "A friend"),
    neglect_person_non_relative   = str_detect(neglect_person, "Some other non-relative"),
    neglect_person_dont_know      = str_detect(neglect_person, "Don’t know"),
    neglect_person_refused        = str_detect(neglect_person, "Refused")
  ) |> 
  # Coerce True and False to 1 and 0
  mutate(across(neglect_person_spouse:neglect_person_refused, ~ as.numeric(.x))) |> 
  # Relocate the dummy variables after the original variable
  relocate(neglect_person_spouse:neglect_person_refused, .after = neglect_person)
```

#### Data check

Number of columns after cleaning the neglect section.

```{r}
# Data check
ncols <- 257
if (ncol(self_rep) != ncols) {
  stop(
    ncols, " columns expected in self_ref after cleaning the neglect variables. ", 
    ncol(self_rep), " columns found. Check into it."
  )
}
```

### Financial Exploitation Variables

#### Columns with Yes/No responses

```{r}
# Columns of interest for this code chunk
cols <- c(
  "finance_help", "finance_person_permission", "finance_person_decisions", 
  "finance_copies", "finance_person_forged", "finance_person_tricked", 
  "finance_person_stolen", "finance_stranger_permission", 
  "finance_stranger_forged", "finance_stranger_tricked", 
  "finance_person_permission_65", "finance_person_forged_65", 
  "finance_person_tricked_65", "finance_person_stolen_65", 
  "finance_stranger_permission_65", "finance_stranger_forged_65", 
  "finance_stranger_tricked_65"
)

# Numeric coding for character values in each column of interest
value_labels <- c("No" = 0, "Yes" = 1, "Don't know" = 7, "Refused" = 9)

# Numeric values to convert to NA in each column of interest
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "2cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
self_rep <- self_rep |> 
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  # Create a factor version of each column (w/o "Don't know" and "Refused")
  factors(cols_suffix, factor_labs_levs) |> 
  # Relocate factor columns immediately after the new columns with NA values
  relocate_factors(cols_suffix)
```

#### Person column

Participants were allowed to choose more than one person during the interview. Since some people chose more than one person for these questions, a dummy variable was created. 

```{r}
# Create dummy variables for person categories 1 = TRUE 0 = FALSE
self_rep <- self_rep %>%
  mutate(
    finance_person_spouse         = str_detect(finance_person, "A spouse or partner"),
    finance_person_ex_partner     = str_detect(finance_person, "An ex-spouse or parner"),
    finance_person_parent         = str_detect(finance_person, "A parent or step-parent"),
    finance_person_sibling        = str_detect(finance_person, "A brother or sister"),
    finance_person_child          = str_detect(finance_person, "A son or daughter"),
    finance_person_other_relative = str_detect(finance_person, "Another relative"),
    finance_person_coworker       = str_detect(finance_person, "A coworker"),
    finance_person_neighbor       = str_detect(finance_person, "A neighbor"),
    finance_person_friend         = str_detect(finance_person, "A friend"),
    finance_person_non_relative   = str_detect(finance_person, "Some other non-relative"),
    finance_person_dont_know      = str_detect(finance_person, "Don’t know"),
    finance_person_refused        = str_detect(finance_person, "Refused")
  ) |> 
  # Coerce True and False to 1 and 0
  mutate(across(finance_person_spouse:finance_person_refused, ~ as.numeric(.x))) |> 
  # Relocate the dummy variables after the original variable
  relocate(finance_person_spouse:finance_person_refused, .after = finance_person)
```

#### When was the last time columns

```{r}
# Columns of interest for this code chunk
cols <- c(
  "finance_person_permission_last_time", "finance_person_forged_last_time", 
  "finance_person_tricked_last_time", "finance_person_stolen_last_time", 
  "finance_stranger_permission_last_time", "finance_stranger_forged_last_time", 
  "finance_stranger_tricked_last_time"
)

# Numeric coding for character values in each column of interest
value_labels <- c(
  "Less than 1 month ago" = 1,
  "Between 1 month and less than 3 months ago" = 2,
  "Between 3 months and less than 6 months ago" = 3,
  "Between 6 months and less than 1 year ago" = 4,
  "Between 1 year and less than 3 years ago" =5,
  "3 or more years ago" = 6, 
  "Don't know" = 7, 
  "Refused" = 9
)

# Numeric values to convert to NA in each column of interest
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "6cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
self_rep <- self_rep |> 
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  # Create a factor version of each column (w/o "Don't know" and "Refused")
  factors(cols_suffix, factor_labs_levs) |> 
  # Relocate factor columns immediately after the new columns with NA values
  relocate_factors(cols_suffix)
```

#### Number of times columns

There is some weird issue with the encoding for "Don't know" values in the `finance_stranger_permission_times` column. When printed to the screen, the value looks the same to humans, but the values are encoded differently (UTF-8) under the hood and R throws an error. To fix, we are overwriting the value.

```{r}
self_rep$finance_stranger_permission_times[!is.na(self_rep$finance_stranger_permission_times)] <- "Don't know"
```

```{r}
# Columns of interest for this code chunk
cols <- c(
  "finance_stranger_permission_times", "finance_stranger_forged_times", 
  "finance_stranger_tricked_times"
)

# Numeric coding for character values in each column of interest
value_labels <- c(
  "1 or 2 times" = 1, 
  "Between 3 and less than 5 times" = 2,
  "Between 5 and less than 10 times" = 3,
  "Between 10 and less than 20 times" = 4, 
  "20 or more times" = 5,
  "Don't know" = 7, 
  "Refused" = 9
)

# Numeric values to convert to NA in each column of interest
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "5cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
self_rep <- self_rep |>
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  # Create a factor version of each column (w/o "Don't know" and "Refused")
  factors(cols_suffix, factor_labs_levs) |> 
  # Relocate factor columns immediately after the new columns with NA values
  relocate_factors(cols_suffix)
```

#### Data check

Number of columns after cleaning the financial exploitation section.

```{r}
# Data check
ncols <- 323
if (ncol(self_rep) != ncols) {
  stop(
    ncols, " columns expected in self_ref after cleaning the finance variables. ", 
    ncol(self_rep), " columns found. Check into it."
  )
}
```

### Emotional Mistreatment Variables

#### Columns with Yes/No responses

```{r}
# Columns of interest for this code chunk
cols <- c(
  "emotional_yelled", "emotional_embarrassed", "emotional_harassed", 
  "emotional_refused", "emotional_incident_reported", "emotional_person_live", 
  "emotional_person_alcohol", "emotional_person_counseling", 
  "emotional_person_police", "emotional_person_job", "emotional_person_help", 
  "emotional_person_no_live", 'emotional_incident_60', "emotional_yelled_65", 
  "emotional_embarrassed_65", "emotional_harassed_65", 'emotional_refused_65', 
  "emotional_incident_reported_v2", "emotional_person_live_then", 
  "emotional_person_live_now"
)

# Numeric coding for character values in each column of interest
value_labels <- c("No" = 0, "Yes" = 1, "Don't know" = 7, "Refused" = 9)

# Numeric values to convert to NA in each column of interest
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "2cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
self_rep <- self_rep |> 
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  # Create a factor version of each column (w/o "Don't know" and "Refused")
  factors(cols_suffix, factor_labs_levs) |> 
  # Relocate factor columns immediately after the new columns with NA values
  relocate_factors(cols_suffix)
```

#### Person column

Participants were allowed to choose more than one person during the interview. Since some people chose more than one person for these questions, a dummy variable was created. 

```{r}
# Create dummy variables for person categories 1 = TRUE 0 = FALSE
self_rep <- self_rep %>%
  mutate(
    emotional_person_spouse         = str_detect(emotional_incident_person, "A spouse or partner"),
    emotional_person_ex_partner     = str_detect(emotional_incident_person, "An ex-spouse or parner"),
    emotional_person_parent         = str_detect(emotional_incident_person, "A parent or step-parent"),
    emotional_person_sibling        = str_detect(emotional_incident_person, "A brother or sister"),
    emotional_person_child          = str_detect(emotional_incident_person, "A son or daughter"),
    emotional_person_other_relative = str_detect(emotional_incident_person, "Another relative"),
    emotional_person_coworker       = str_detect(emotional_incident_person, "A coworker"),
    emotional_person_neighbor       = str_detect(emotional_incident_person, "A neighbor"),
    emotional_person_friend         = str_detect(emotional_incident_person, "A friend"),
    emotional_person_non_relative   = str_detect(emotional_incident_person, "Some other non-relative"),
    emotional_person_dont_know      = str_detect(emotional_incident_person, "Don’t know"),
    emotional_person_refused        = str_detect(emotional_incident_person, "Refused")
  ) |> 
  # Coerce True and False to 1 and 0
  mutate(across(emotional_person_spouse:emotional_person_refused, ~ as.numeric(.x))) |> 
  # Relocate the dummy variables after the original variable
  relocate(emotional_person_spouse:emotional_person_refused, .after = emotional_incident_person)
```

#### When was the last time columns

There is some weird issue with the encoding for "Don't know" values in the `emotional_embarrassed_last_time` column. When printed to the screen, the value looks the same to humans, but the values are encoded differently (UTF-8) under the hood and R throws an error. To fix, we are overwriting the value.

```{r}
# unique(self_rep$emotional_embarrassed_last_time)
# Encoding(unique(self_rep$emotional_embarrassed_last_time))
```

```{r}
self_rep$emotional_embarrassed_last_time[self_rep$emotional_embarrassed_last_time == "Don’t know"] <- "Don't know"
```

```{r}
# Encoding(unique(self_rep$emotional_embarrassed_last_time))
```

```{r}
# Columns of interest for this code chunk
cols <- c(
  "emotional_yelled_last_time", "emotional_embarrassed_last_time", 
  "emotional_harassed_last_time", "emotional_refused_last_time"
)

# Numeric coding for character values in each column of interest
value_labels <- c(
  "Less than 1 month ago" = 1,
  "Between 1 month and less than 3 months ago" = 2,
  "Between 3 months and less than 6 months ago" = 3,
  "Between 6 months and less than 1 year ago" = 4,
  "Between 1 year and less than 3 years ago" =5,
  "3 or more years ago" = 6, 
  "Don't know" = 7, 
  "Refused" = 9
)

# Numeric values to convert to NA in each column of interest
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "6cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
self_rep <- self_rep |>
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  # Create a factor version of each column (w/o "Don't know" and "Refused")
  factors(cols_suffix, factor_labs_levs) |> 
  # Relocate factor columns immediately after the new columns with NA values
  relocate_factors(cols_suffix)
```

#### Number of times columns

There is some weird issue with the encoding for "Don't know" values in all of the columns in this section. When printed to the screen, the value looks the same to humans, but the values are encoded differently (UTF-8) under the hood and R throws an error. To fix, we are overwriting the value.

```{r}
# unique(self_rep$emotional_refused_times)
# Encoding(unique(self_rep$emotional_refused_times))
```

```{r}
self_rep$emotional_yelled_times[self_rep$emotional_yelled_times == "Don’t know"] <- "Don't know"
self_rep$emotional_embarrassed_times[self_rep$emotional_embarrassed_times == "Don’t know"] <- "Don't know"
self_rep$emotional_harassed_times[self_rep$emotional_harassed_times == "Don’t know"] <- "Don't know"
self_rep$emotional_refused_times[self_rep$emotional_refused_times == "Don’t know"] <- "Don't know"
```

```{r}
# Encoding(unique(self_rep$emotional_refused_times))
```

```{r}
# Columns of interest for this code chunk
cols <- c(
  "emotional_yelled_times", "emotional_embarrassed_times", 
  "emotional_harassed_times", "emotional_refused_times"
)

# Numeric coding for character values in each column of interest
value_labels <- c(
  "1 or 2 times" = 1, 
  "Between 3 and less than 5 times" = 2,
  "Between 5 and less than 10 times" = 3,
  "Between 10 and less than 20 times" = 4, 
  "20 or more times" = 5,
  "Don't know" = 7, 
  "Refused" = 9
)

# Numeric values to convert to NA in each column of interest
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "5cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
self_rep <- self_rep |>
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  # Create a factor version of each column (w/o "Don't know" and "Refused")
  factors(cols_suffix, factor_labs_levs) |> 
  # Relocate factor columns immediately after the new columns with NA values
  relocate_factors(cols_suffix)
```

#### Number of friends column

There is some weird issue with the encoding for "Don't know" values in the `emotional_person_friends` column. When printed to the screen, the value looks the same to humans, but the values are encoded differently (UTF-8) under the hood and R throws an error. To fix, we are overwriting the value.

```{r}
self_rep$emotional_person_friends[self_rep$emotional_person_friends == "Don’t know"] <- "Don't know"
```

```{r}
# Columns of interest for this code chunk
cols <- c("emotional_person_friends")

# Numeric coding for character values in each column of interest
value_labels <- c(
  "None" = 0, 
  "Very few (1-3)" = 1,
  "Some (4-6)" = 2,
  "A lot (7+)" = 3, 
  "Don't know" = 7, 
  "Refused" = 9
)

# Numeric values to convert to NA in each column of interest
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "4cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
self_rep <- self_rep |> 
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  # Create a factor version of each column (w/o "Don't know" and "Refused")
  factors(cols_suffix, factor_labs_levs) |> 
  # Relocate factor columns immediately after the new columns with NA values
  relocate_factors(cols_suffix)
```

#### Person column

Participants were allowed to choose more than one person during the interview. Since some people chose more than one person for these questions, a dummy variable was created. 

The categories were a little different for `emotional_incident_person` and `emotional_incident_person_v2`.

```{r}
# Create dummy variables for person categories 1 = TRUE 0 = FALSE
self_rep <- self_rep %>%
  mutate(
    emotional_person_stranger_v2       = str_detect(emotional_incident_person_v2, "A stranger"),
    emotional_spouse_v2                = str_detect(emotional_incident_person_v2, "A spouse or partner"),
    emotional_person_ex_partner_v2     = str_detect(emotional_incident_person_v2, "An ex-spouse or parner"),
    emotional_person_parent_v2         = str_detect(emotional_incident_person_v2, "A parent or step-parent"),
    emotional_person_sibling_v2        = str_detect(emotional_incident_person_v2, "A brother or sister"),
    emotional_person_child_v2          = str_detect(emotional_incident_person_v2, "A son or daughter"),
    emotional_person_other_relative_v2 = str_detect(emotional_incident_person_v2, "Another relative"),
    emotional_person_coworker_v2       = str_detect(emotional_incident_person_v2, "A coworker"),
    emotional_person_neighbor_v2       = str_detect(emotional_incident_person_v2, "A neighbor"),
    emotional_person_friend_v2         = str_detect(emotional_incident_person_v2, "A friend"),
    emotional_person_non_relative_v2   = str_detect(emotional_incident_person_v2, "Some other non-relative"),
    emotional_person_dont_know_v2      = str_detect(emotional_incident_person_v2, "Don’t know"),
    emotional_person_refused_v2        = str_detect(emotional_incident_person_v2, "Refused")
  ) |> 
  # Coerce True and False to 1 and 0
  mutate(across(emotional_person_stranger_v2:emotional_person_refused_v2, ~ as.numeric(.x))) |> 
  # Relocate the dummy variables after the original variable
  relocate(emotional_person_stranger_v2:emotional_person_refused_v2, .after = emotional_incident_person_v2)
```

#### Data check

Number of columns after cleaning the emotional mistreatment section.

```{r}
# Data check
ncols <- 406
if (ncol(self_rep) != ncols) {
  stop(
    ncols, " columns expected in self_ref after cleaning the emotional variables. ", 
    ncol(self_rep), " columns found. Check into it."
  )
}
```

### Physical Mistreatment Variables

#### Columns with Yes/No responses

```{r}
# Columns of interest for this code chunk 
cols <- c(
  "physical_hit", "physical_restrain", "physical_hurt", "physical_incident_60", 
  "physical_incident_reported", "physical_incident_person", 
  "physical_person_live", "physical_person_alcohol", "physical_person_counseling", 
  "physical_person_police", "physical_person_job", "physical_person_help", 
  "physical_person_no_live", "physical_hit_65", "physical_restrain_65", 
  "physical_hurt_65", "physical_incident_reported_v2", 
  "physical_person_live_then", "physical_person_live_now"
)

# Numeric coding for character values in each column of interest
value_labels <- c("No" = 0, "Yes" = 1, "Don't know" = 7, "Refused" = 9)

# Numeric values to convert to NA in each column of interest
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "2cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
self_rep <- self_rep |>
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  # Create a factor version of each column (w/o "Don't know" and "Refused")
  factors(cols_suffix, factor_labs_levs) |> 
  # Relocate factor columns immediately after the new columns with NA values
  relocate_factors(cols_suffix)
```

#### When was the last time columns

```{r}
# Columns of interest for this code chunk
cols <- c(
  "physical_hit_last_time", "physical_restrain_last_time", 
  "physical_hurt_last_time"
)

# Numeric coding for character values in each column of interest
value_labels <- c(
  "Less than 1 month ago" = 1,
  "Between 1 month and less than 3 months ago" = 2,
  "Between 3 months and less than 6 months ago" = 3,
  "Between 6 months and less than 1 year ago" = 4,
  "Between 1 year and less than 3 years ago" =5,
  "3 or more years ago" = 6, 
  "Don't know" = 7, 
  "Refused" = 9
)

# Numeric values to convert to NA in each column of interest
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "6cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
self_rep <- self_rep |>
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  # Create a factor version of each column (w/o "Don't know" and "Refused")
  factors(cols_suffix, factor_labs_levs) |> 
  # Relocate factor columns immediately after the new columns with NA values
  relocate_factors(cols_suffix)
```

#### Number of times columns

There is some weird issue with the encoding for "Don't know" values in all of the columns in this section. When printed to the screen, the value looks the same to humans, but the values are encoded differently (UTF-8) under the hood and R throws an error. To fix, we are overwriting the value.

```{r}
# unique(self_rep$physical_hurt_times)
# Encoding(unique(self_rep$physical_hurt_times))
```

```{r}
self_rep$physical_hit_times[self_rep$physical_hit_times == "Don’t know"] <- "Don't know"
self_rep$physical_restrain_times[self_rep$physical_restrain_times == "Don’t know"] <- "Don't know"
self_rep$physical_hurt_times[self_rep$physical_hurt_times == "Don’t know"] <- "Don't know"
```

```{r}
# Columns of interest for this code chunk
cols <- c(
  "physical_hit_times", "physical_restrain_times", "physical_hurt_times"
)

# Numeric coding for character values in each column of interest
value_labels <- c(
  "1 or 2 times" = 1, 
  "Between 3 and less than 5 times" = 2,
  "Between 5 and less than 10 times" = 3,
  "Between 10 and less than 20 times" = 4, 
  "20 or more times" = 5,
  "Don't know" = 7, 
  "Refused" = 9
)

# Numeric values to convert to NA in each column of interest
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "5cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
self_rep <- self_rep |>
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  # Create a factor version of each column (w/o "Don't know" and "Refused")
  factors(cols_suffix, factor_labs_levs) |> 
  # Relocate factor columns immediately after the new columns with NA values
  relocate_factors(cols_suffix)
```

#### Number of friends column

There is some weird issue with the encoding for "Don't know" values in the `physical_person_friends` column. When printed to the screen, the value looks the same to humans, but the values are encoded differently (UTF-8) under the hood and R throws an error. To fix, we are overwriting the value.

```{r}
self_rep$physical_person_friends[self_rep$physical_person_friends == "Don’t know"] <- "Don't know"
```

```{r}
# Columns of interest for this code chunk
cols <- c("physical_person_friends")

# Numeric coding for character values in each column of interest
value_labels <- c(
  "None" = 0, 
  "Very few (1-3)" = 1,
  "Some (4-6)" = 2,
  "A lot (7+)" = 3, 
  "Don't know" = 7, 
  "Refused" = 9
)

# Numeric values to convert to NA in each column of interest
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "4cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
self_rep <- self_rep |>
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  # Create a factor version of each column (w/o "Don't know" and "Refused")
  factors(cols_suffix, factor_labs_levs) |> 
  # Relocate factor columns immediately after the new columns with NA values
  relocate_factors(cols_suffix)
```

#### Person column

Participants were allowed to choose more than one person during the interview. Since some people chose more than one person for these questions, a dummy variable was created. 

```{r}
# Create dummy variables for person categories 1 = TRUE 0 = FALSE
self_rep <- self_rep %>%
  mutate(
    physical_person_stranger_v2       = str_detect(physical_incident_person_v2, "A stranger"),
    physical_spouse_v2                = str_detect(physical_incident_person_v2, "A spouse or partner"),
    physical_person_ex_partner_v2     = str_detect(physical_incident_person_v2, "An ex-spouse or parner"),
    physical_person_parent_v2         = str_detect(physical_incident_person_v2, "A parent or step-parent"),
    physical_person_sibling_v2        = str_detect(physical_incident_person_v2, "A brother or sister"),
    physical_person_child_v2          = str_detect(physical_incident_person_v2, "A son or daughter"),
    physical_person_other_relative_v2 = str_detect(physical_incident_person_v2, "Another relative"),
    physical_person_coworker_v2       = str_detect(physical_incident_person_v2, "A coworker"),
    physical_person_neighbor_v2       = str_detect(physical_incident_person_v2, "A neighbor"),
    physical_person_friend_v2         = str_detect(physical_incident_person_v2, "A friend"),
    physical_person_non_relative_v2   = str_detect(physical_incident_person_v2, "Some other non-relative"),
    physical_person_dont_know_v2      = str_detect(physical_incident_person_v2, "Don’t know"),
    physical_person_refused_v2        = str_detect(physical_incident_person_v2, "Refused")
  ) |> 
  # Coerce True and False to 1 and 0
  mutate(across(physical_person_stranger_v2:physical_person_refused_v2, ~ as.numeric(.x))) |> 
  # Relocate the dummy variables after the original variable
  relocate(physical_person_stranger_v2:physical_person_refused_v2, .after = physical_incident_person_v2)
```

```{r}
# Create dummy variables for person categories 1 = TRUE 0 = FALSE
self_rep <- self_rep %>%
  mutate(
    physical_person_stranger       = str_detect(physical_incident_person, "A stranger"),
    physical_spouse                = str_detect(physical_incident_person, "A spouse or partner"),
    physical_person_ex_partner     = str_detect(physical_incident_person, "An ex-spouse or parner"),
    physical_person_parent         = str_detect(physical_incident_person, "A parent or step-parent"),
    physical_person_sibling        = str_detect(physical_incident_person, "A brother or sister"),
    physical_person_child          = str_detect(physical_incident_person, "A son or daughter"),
    physical_person_other_relative = str_detect(physical_incident_person, "Another relative"),
    physical_person_coworker       = str_detect(physical_incident_person, "A coworker"),
    physical_person_neighbor       = str_detect(physical_incident_person, "A neighbor"),
    physical_person_friend         = str_detect(physical_incident_person, "A friend"),
    physical_person_non_relative   = str_detect(physical_incident_person, "Some other non-relative"),
    physical_person_dont_know      = str_detect(physical_incident_person, "Don’t know"),
    physical_person_refused        = str_detect(physical_incident_person, "Refused")
  ) |> 
  # Coerce True and False to 1 and 0
  mutate(across(physical_person_stranger:physical_person_refused, ~ as.numeric(.x))) |> 
  # Relocate the dummy variables after the original variable
  relocate(physical_person_stranger:physical_person_refused, .after = physical_incident_person)
```

#### Data check

Number of columns after cleaning the physical mistreatment section.

```{r}
# Data check
ncols <- 484
if (ncol(self_rep) != ncols) {
  stop(
    ncols, " columns expected in self_ref after cleaning the physical variables. ", 
    ncol(self_rep), " columns found. Check into it."
  )
}
```

### Sexual mistreatment variables

#### Columns with Yes/No responses

```{r}
# Columns of interest for this code chunk 
cols <- c(
  "sexual_harm", "sexual_touched", "sexual_forced", "sexual_picture", 
  "sexual_incident_60", "sexual_incident_reported", "sexual_incident_person", 
  "sexual_person_live", "sexual_person_alcohol", "sexual_person_counseling", 
  "sexual_person_police", "sexual_person_job", "sexual_person_help", 
  "sexual_person_no_live", "sexual_harm_65", "sexual_touched_65", 
  "sexual_forced_65", "sexual_picture_65", "sexual_incident_reported_v2", 
  "sexual_person_live_then", "sexual_person_live_now"
)

# Numeric coding for character values in each column of interest
value_labels <- c("No" = 0, "Yes" = 1, "Don't know" = 7, "Refused" = 9)

# Numeric values to convert to NA in each column of interest
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "2cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
self_rep <-self_rep |>
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  # Create a factor version of each column (w/o "Don't know" and "Refused")
  factors(cols_suffix, factor_labs_levs) |> 
  # Relocate factor columns immediately after the new columns with NA values
  relocate_factors(cols_suffix)
```

#### When was the last time columns

```{r}
# Columns of interest for this code chunk
cols <- c(
  "sexual_harm_last_time", "sexual_touched_last_time", 
  "sexual_forced_last_time", "sexual_picture_last_time"
)

# Numeric coding for character values in each column of interest
value_labels <- c(
  "Less than 1 month ago" = 1,
  "Between 1 month and less than 3 months ago" = 2,
  "Between 3 months and less than 6 months ago" = 3,
  "Between 6 months and less than 1 year ago" = 4,
  "Between 1 year and less than 3 years ago" =5,
  "3 or more years ago" = 6, 
  "Don't know" = 7, 
  "Refused" = 9
)

# Numeric values to convert to NA in each column of interest
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "6cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
self_rep <- self_rep |>
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  # Create a factor version of each column (w/o "Don't know" and "Refused")
  factors(cols_suffix, factor_labs_levs) |> 
  # Relocate factor columns immediately after the new columns with NA values
  relocate_factors(cols_suffix)
```

#### Number of times columns

There is some weird issue with the encoding for "Don't know" values in all of the columns in this section. When printed to the screen, the value looks the same to humans, but the values are encoded differently (UTF-8) under the hood and R throws an error. To fix, we are overwriting the value.

```{r}
self_rep$sexual_harm_times[self_rep$sexual_harm_times == "Don’t know"] <- "Don't know"
self_rep$sexual_touched_times[self_rep$sexual_touched_times == "Don’t know"] <- "Don't know"
self_rep$sexual_forced_times[self_rep$sexual_forced_times == "Don’t know"] <- "Don't know"
self_rep$sexual_picture_times[self_rep$sexual_picture_times == "Don’t know"] <- "Don't know"
```

```{r}
# Columns of interest for this code chunk
cols <- c(
  "sexual_harm_times", "sexual_touched_times", "sexual_forced_times", 
  "sexual_picture_times"
)

# Numeric coding for character values in each column of interest
value_labels <- c(
  "1 or 2 times" = 1, 
  "Between 3 and less than 5 times" = 2,
  "Between 5 and less than 10 times" = 3,
  "Between 10 and less than 20 times" = 4, 
  "20 or more times" = 5,
  "Don't know" = 7, 
  "Refused" = 9
)

# Numeric values to convert to NA in each column of interest
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "5cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
self_rep <- self_rep |>
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  # Create a factor version of each column (w/o "Don't know" and "Refused")
  factors(cols_suffix, factor_labs_levs) |> 
  # Relocate factor columns immediately after the new columns with NA values
  relocate_factors(cols_suffix)
```

#### Number of friends column

There is some weird issue with the encoding for "Don't know" values in the `sexual_person_friends` column. When printed to the screen, the value looks the same to humans, but the values are encoded differently (UTF-8) under the hood and R throws an error. To fix, we are overwriting the value.

```{r}
self_rep$sexual_person_friends[self_rep$sexual_person_friends == "Don’t know"] <- "Don't know"
```

```{r}
# Columns of interest for this code chunk
cols <- c("sexual_person_friends")

# Numeric coding for character values in each column of interest
value_labels <- c(
  "None" = 0, 
  "Very few (1-3)" = 1,
  "Some (4-6)" = 2,
  "A lot (7+)" = 3, 
  "Don't know" = 7, 
  "Refused" = 9
)

# Numeric values to convert to NA in each column of interest
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "4cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
self_rep <- self_rep |>
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  # Create a factor version of each column (w/o "Don't know" and "Refused")
  factors(cols_suffix, factor_labs_levs) |> 
  # Relocate factor columns immediately after the new columns with NA values
  relocate_factors(cols_suffix)
```

#### Person column

Participants were allowed to choose more than one person during the interview. Since some people chose more than one person for these questions, a dummy variable was created. 

```{r}
# Create dummy variables for person categories 1 = TRUE 0 = FALSE
self_rep <- self_rep %>%
  mutate(
    sexual_person_stranger_v2       = str_detect(sexual_incident_person_v2, "A stranger"),
    sexual_spouse_v2                = str_detect(sexual_incident_person_v2, "A spouse or partner"),
    sexual_person_ex_partner_v2     = str_detect(sexual_incident_person_v2, "An ex-spouse or parner"),
    sexual_person_parent_v2         = str_detect(sexual_incident_person_v2, "A parent or step-parent"),
    sexual_person_sibling_v2        = str_detect(sexual_incident_person_v2, "A brother or sister"),
    sexual_person_child_v2          = str_detect(sexual_incident_person_v2, "A son or daughter"),
    sexual_person_other_relative_v2 = str_detect(sexual_incident_person_v2, "Another relative"),
    sexual_person_coworker_v2       = str_detect(sexual_incident_person_v2, "A coworker"),
    sexual_person_neighbor_v2       = str_detect(sexual_incident_person_v2, "A neighbor"),
    sexual_person_friend_v2         = str_detect(sexual_incident_person_v2, "A friend"),
    sexual_person_non_relative_v2   = str_detect(sexual_incident_person_v2, "Some other non-relative"),
    sexual_person_dont_know_v2      = str_detect(sexual_incident_person_v2, "Don’t know"),
    sexual_person_refused_v2        = str_detect(sexual_incident_person_v2, "Refused")
  ) |> 
  # Coerce True and False to 1 and 0
  mutate(across(sexual_person_stranger_v2:sexual_person_refused_v2, ~ as.numeric(.x))) |> 
  # Relocate the dummy variables after the original variable
  relocate(sexual_person_stranger_v2:sexual_person_refused_v2, .after = sexual_incident_person_v2)
```

```{r}
# Create dummy variables for person categories 1 = TRUE 0 = FALSE
self_rep <- self_rep %>%
  mutate(
    sexual_person_stranger       = str_detect(sexual_incident_person, "A stranger"),
    sexual_spouse                = str_detect(sexual_incident_person, "A spouse or partner"),
    sexual_person_ex_partner     = str_detect(sexual_incident_person, "An ex-spouse or parner"),
    sexual_person_parent         = str_detect(sexual_incident_person, "A parent or step-parent"),
    sexual_person_sibling        = str_detect(sexual_incident_person, "A brother or sister"),
    sexual_person_child          = str_detect(sexual_incident_person, "A son or daughter"),
    sexual_person_other_relative = str_detect(sexual_incident_person, "Another relative"),
    sexual_person_coworker       = str_detect(sexual_incident_person, "A coworker"),
    sexual_person_neighbor       = str_detect(sexual_incident_person, "A neighbor"),
    sexual_person_friend         = str_detect(sexual_incident_person, "A friend"),
    sexual_person_non_relative   = str_detect(sexual_incident_person, "Some other non-relative"),
    sexual_person_dont_know      = str_detect(sexual_incident_person, "Don’t know"),
    sexual_person_refused        = str_detect(sexual_incident_person, "Refused")
  ) |> 
  # Coerce True and False to 1 and 0
  mutate(across(sexual_person_stranger:sexual_person_refused, ~ as.numeric(.x))) |> 
  # Relocate the dummy variables after the original variable
  relocate(sexual_person_stranger:sexual_person_refused, .after = sexual_incident_person)
```

#### Data check

Number of columns after cleaning the sexual mistreatment section.

```{r}
# Data check
ncols <- 570
if (ncol(self_rep) != ncols) {
  stop(
    ncols, " columns expected in self_ref after cleaning the sexual variables. ", 
    ncol(self_rep), " columns found. Check into it."
  )
}
```

## Clean fears, needs, wants variables

There were four questions in this section of the follow-up interview. All of them allowed open-ended responses.

1. What do you worry most about right now?
2. What is your greatest fear for your future?
3. What are you most grateful for right now?
4. What are you most looking forward to for your future?

For each question, FM Pro exports two columns. 

- The second column for each question (i.e., `fear_afraid_response`, `fear_future_response`, `fear_grateful_response`, `fear_forward_response`, `fear_important_response`) contains the participant's open-ended response as a character string or an `NA` value. The value will be `NA` if the question was skipped, the participant said "Don't know", or the participant "Refused".

- The first column for each question (i.e., `fear_afraid`, `fear_future`, `fear_grateful`, `fear_forward`, and `fear_important`) can only contain 2 possible values values: "Don't know" and "Refused". These columns are not likely to be very useful in practice, but we will keep them in the data for sake of completeness.

There is some weird issue with the encoding for "Don't know" values in all of the columns in this section. When printed to the screen, the value looks the same to humans, but the values are encoded differently (UTF-8) under the hood and R throws an error. To fix, we are overwriting the value.

```{r}
# Columns of interest for this code chunk
cols <- c(
  "fear_afraid", "fear_future", "fear_grateful", "fear_forward", 
  "fear_important"
)

# Fix the encoding for "Don't know"
self_rep <- self_rep |> 
  mutate(
    across(
      all_of(cols),
      function(x) {
        x[x == "Don’t know"] <- "Don't know"
      }
    )
  )
```

```{r}
# Columns of interest for this code chunk
cols <- c(
  "fear_afraid_response", "fear_future_response", "fear_grateful_response", 
  "fear_forward_response", "fear_important_response"
)

# Fix the encoding for "Don't know"
self_rep <- self_rep |> 
  mutate(
    across(
      all_of(cols),
      function(x) {
        encodings <- Encoding(x)
        utf_8_index <- which(encodings == "UTF-8")
        Encoding(self_rep$fear_afraid_response[utf_8_index]) <- "unknown"
      }
    )
  )
```

- The columns above do not represent categories. Therefore, there is no need to coerce them to factors.
- The section above does not change the number of rows or columns, so there is no need for another data check here.

## Clean environment variables

```{r}
self_rep <- self_rep |>
  mutate(
    # Convert character values to numeric values
    report_private = case_when(
      report_private == "Yes, for the entire time" ~ 1,
      report_private == "Yes, for part of the time" ~ 2,
      report_private == "No, but they were still close enough to hear" ~ 3,
      report_private == "No" ~ 4,
      report_private == "Don't know" ~ 7
    ),
    report_influence = case_when(
      report_influence == "Yes" ~ 1,
      report_influence == "No" ~ 0,
      report_influence == "Don't know" ~ 7,
      report_influence == "Refused" ~ 9
    ),
    
    # Create a version of each column with "Don't know" and "Refused" converted to NA
    report_private_4cat = case_when(
      report_private == 7 ~ NA_real_,
      TRUE ~ report_private
    ),
    report_influence_2cat = case_when(
      report_influence == 7 ~ NA_real_,
      TRUE ~ report_influence
    )
  ) |> 
  
  # Relocate new columns with NA values immediately after the original column
  relocate(report_private_4cat, .after = report_private) |> 
  relocate(report_influence_2cat, .after = report_influence) |> 
  
  # Create a factor version of each column (w/o "Don't know" and "Refused")
  mutate(
    report_private_4cat_f = factor(
      report_private_4cat,
      1:4,
      c(
        "Yes, for the entire time", "Yes, for part of the time",
        "No, but they were still close enough to hear", "No"
      )
    ),
    report_influence_2cat_f = factor(
      report_influence_2cat,
      0:1,
      c("No", "Yes")
    )
  ) |> 
  
  # Relocate factor columns immediately after the new columns with NA values
  relocate(report_private_4cat_f, .after = report_private_4cat) |> 
  relocate(report_influence_2cat_f, .after = report_influence_2cat)
```

### Data check

Number of columns after cleaning the environment variables section.

```{r}
# Data check
ncols <- 574
if (ncol(self_rep) != ncols) {
  stop(
    ncols, " columns expected in self_ref after cleaning the environment variables. ", 
    ncol(self_rep), " columns found. Check into it."
  )
}
```


# Save as rds file

```{r}
self_rep_path <- here::here("data", "cleaned_rds_files", "self_report_import.rds")
```

```{r}
readr::write_rds(self_rep, self_rep_path)
```


# Clean up

```{r}
rm(list = ls())
```
