---
title: "Import Data from FileMaker Pro: Self Report"
---

# Overview

In this file, we import and do some initial cleaning of the EM self-report data collected and stored in FileMaker Pro.


# Load packages

```{r, message= FALSE}
# Load all necessary libraries
library(dplyr, warn.conflicts = FALSE)
library(janitor, warn.conflicts = FALSE)
library(stringr)
```


# Load custom functions

```{r}
source(here::here("R", "recoding_factoring_relocating.R"))
source(here::here("R", "nums_to_na.R"))
```


# Load data

Load the data table into the global environment as a data frame using the raw csv file. See this Wiki page for more information about the location of the data: https://github.com/brad-cannell/detect_fu_interviews_public/wiki. 

```{r}
self_rep_path <- here::here("data", "filemaker_pro_exports", "self_report_import.csv")
```

```{r}
self_rep <- readr::read_csv(self_rep_path)
rm(self_rep_path)
```

```{r}
# Data check
dim(self_rep) # 956 209
```


# Data cleaning

Here we will convert all variable names to snake case so that everything is uniform.

```{r}
self_rep <- clean_names(self_rep,
  replace = c(
    "60" = "_60",
    "65" = "_65"
  )
)
```

## Filter rows

There is one row that is missing a MedStar ID and almost all other variables. My best guess is that this was a record Sunil was experimenting with. We will drop the row.

```{r}
self_rep <- self_rep |> 
  filter(!is.na(medstar_id))
```

```{r}
# Data check
dim(self_rep) # 955 209
```

## Clean categorical variables

- By default, FM Pro exports all categorical variables as character variables.
- When analyzing data in R, we prefer to work factors and occasionally with numeric values.
- Below, we:
  - Convert character values to numeric values
  - Create a version of each column with "Don't know" and "Refused" converted to NA
  - Create a factor version of each column (w/o "Don't know" and "Refused")
  - Arrange the columns as: original column, numeric column w/o "Don't know" and "Refused", 
    and the factor version of the column.

### Neglect variables

### Columns with Yes/No responses

```{r}
# Columns of interest for this code chunk
cols <- c(
  "neglect_go", "neglect_food", "neglect_house", "neglect_clean", "neglect_ready", 
  "neglect_bills"
)

# Numeric coding for character values in each column of interest
value_labels <- c("No" = 0, "Yes" = 1, "Don't know" = 7, "Refused" = 9)

# Numeric values to convert to NA in each column of interest
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "2cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
self_rep <- self_rep |> 
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  factors(cols_suffix, factor_labs_levs) |> 
  relocate_factors(cols_suffix)
```

### Columns with number of people responses

```{r}
# Columns of interest for this code chunk
cols <- c(
  "neglect_go_help", "neglect_food_help", "neglect_house_help", "neglect_clean_help", 
  "neglect_ready_help", "neglect_bills_help"
)

# Numeric coding for character values in each column of interest
value_labels <- c(
  "Yes, one person" = 1, "Yes, more than one person" = 2, "No" = 0,
  "Donâ€™t know" = 7, "Refused" = 9
)

# NA values
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "3cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
self_rep <- self_rep |>
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  factors(cols_suffix, factor_labs_levs) |> 
  relocate_factors(cols_suffix)
```

### Columns with reliability responses

```{r}
# Columns of interest for this code chunk
cols <- c(
  "neglect_go_reliable", "neglect_food_reliable", "neglect_house_reliable", 
  "neglect_clean_reliable", "neglect_ready_reliable", "neglect_bills_reliable"
)

# Numeric coding for character values in each column of interest
value_labels <- c(
  "Not at all reliable" = 1, "Somewhat reliable" = 2,
  "Very reliable" = 3, "Completely reliable" = 4, "Donâ€™t know" = 7,
  "Refused" = 9
)

# NA values
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "4cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
self_rep <- self_rep |>
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  factors(cols_suffix, factor_labs_levs) |> 
  relocate_factors(cols_suffix)
```

### Person column

Participants were allowed to choose more than one person during the interview. Since some people chose more than one person for these questions, a dummy variable was created. 

```{r}
# Create dummy variables for race categories 1 = TRUE 0 = FALSE
self_rep <- self_rep |> 
  mutate(
    neglect_person_spouse         = str_detect(neglect_person, "A spouse or partner"),
    neglect_person_ex_partner     = str_detect(neglect_person, "An ex-spouse or parner"),
    neglect_person_parent         = str_detect(neglect_person, "A parent or step-parent"),
    neglect_person_sibling        = str_detect(neglect_person, "A brother or sister"),
    neglect_person_child          = str_detect(neglect_person, "A son or daughter"),
    neglect_person_other_relative = str_detect(neglect_person, "Another relative"),
    neglect_person_coworker       = str_detect(neglect_person, "A coworker"),
    neglect_person_neighbor       = str_detect(neglect_person, "A neighbor"),
    neglect_person_friend         = str_detect(neglect_person, "A friend"),
    neglect_person_non_relative   = str_detect(neglect_person, "Some other non-relative"),
    neglect_person_dont_know      = str_detect(neglect_person, "Donâ€™t know"),
    neglect_person_refused        = str_detect(neglect_person, "Refused")
  ) |> 
  # Coerce True and False to 1 and 0
  mutate(across(neglect_person_spouse:neglect_person_refused, ~ as.numeric(.x))) |> 
  # Relocate the dummy variables after the original variable
  relocate(neglect_person_spouse:neglect_person_refused, .after = neglect_person)
```

```{r}
testthat::test_that("Check the number of rows and columns after cleaning the neglect columns", {
  data_check <- dim(self_rep)
  testthat::expect_equal(data_check, c(955, 257))
})
```

### Financial Exploitation Variables

# ðŸ”´ Delete

Delete the code chunk below when no longer needed.

```{r}
# self_rep <- self_rep %>%
#   mutate(
#     across(
#       .cols = starts_with("finance") & !ends_with("years") &
#         !ends_with("times") & !ends_with("age") & !ends_with("person") &
#         !ends_with("last_time"),
#       .fns = ~ case_when(
#         .x == "Yes" ~ 1,
#         .x == "No" ~ 2,
#         .x == "Don't know" ~ 7,
#         .x == "Refused" ~ 9
#       ),
#       .names = "{col}_4cat"
#     ),
#     across(
#       .cols = starts_with("finance") & !ends_with("years") &
#         !ends_with("times") & !ends_with("age") & !ends_with("person") &
#         !ends_with("last_time") & !ends_with("4cat"),
#       .fns = ~ factor(.x, levels = levels_yes_no),
#       .names = "{col}_4cat_f"
#     ),
#     finance_person_12cat = case_when(
#       finance_person == "A spouse or partner" ~ 1,
#       finance_person == "An ex spouse or partner" ~ 2,
#       finance_person == "A parent or step-parent" ~ 3,
#       finance_person == "A brother or sister" ~ 4,
#       finance_person == "A son or daughter" ~ 5,
#       finance_person == "Another relative" ~ 6,
#       finance_person == "A coworker" ~ 7,
#       finance_person == "A neighbor" ~ 8,
#       finance_person == "A friend" ~ 9,
#       finance_person == "Some other non-relative" ~ 10,
#       finance_person == "Don't know" ~ 77,
#       finance_person == "Refused" ~ 99
#     ),
#     finance_person_12cat_f = factor(
#       finance_person,
#       levels = levels_person
#     ),
#     across(
#       .cols = starts_with("finance") & ends_with("last_time"),
#       .fns = ~ case_when(
#         .x == "Less than 1 month ago" ~ 1,
#         .x == "Between 1 month and less than 3 months ago" ~ 2,
#         .x == "Between 3 months and less than 6 months ago" ~ 3,
#         .x == "Between 6 months and less than 1 year ago" ~ 4,
#         .x == "Between 1 year and less than 3 years ago" ~ 5,
#         .x == "3 or more years ago" ~ 6,
#         .x == "Don't know" ~ 7,
#         .x == "Refused" ~ 9
#       ),
#       .names = "{col}_8cat"
#     ),
#     across(
#       .cols  = starts_with("finance") & ends_with("last_time"),
#       .fns   = ~ factor(.x, levels = levels_last_time),
#       .names =  "{col}_8cat_f"
#     ),
#     across(
#       .cols = starts_with("finance") & ends_with("times") &
#         !ends_with("times_times"),
#       .fns = ~ case_when(
#         .x == "1 or 2 times" ~ 1,
#         .x == "Between 3 and less than 5 times" ~ 2,
#         .x == "Between 5 and less than 10 times" ~ 3,
#         .x == "Between 10 and less than 20 times" ~ 4,
#         .x == "20 or more times" ~ 5,
#         .x == "Don't know" ~ 7,
#         .x == "Refused" ~ 9
#       ),
#       .names = "{col}_7cat"
#     ),
#     across(
#       .cols  = starts_with("finance") & ends_with("times") &
#         !ends_with("times_times"),
#       .fns   = ~ factor(.x, levels = levels_times),
#       .names =  "{col}_7cat_f"
#     )
#   )
```

### Columns with Yes/No responses

```{r}
# Columns of interest for this code chunk
cols <- c(
  "finance_help", "finance_person_permission", "finance_person_decisions", 
  "finance_copies", "finance_person_forged", "finance_person_tricked", 
  "finance_person_stolen", "finance_stranger_permission", 
  "finance_stranger_forged", "finance_stranger_tricked", 
  "finance_person_permission_65", "finance_person_forged_65", 
  "finance_person_tricked_65", "finance_person_stolen_65", 
  "finance_stranger_permission_65", "finance_stranger_forged_65", 
  "finance_stranger_tricked_65"
)

# Numeric coding for character values in each column of interest
value_labels <- c("No" = 0, "Yes" = 1, "Don't know" = 7, "Refused" = 9)

# Numeric values to convert to NA in each column of interest
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "2cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
self_rep <- self_rep |> 
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  factors(cols_suffix, factor_labs_levs) |> 
  relocate_factors(cols_suffix)
```

### Person column

Participants were allowed to choose more than one person during the interview. Since some people chose more than one person for these questions, a dummy variable was created. 

```{r}
# Create dummy variables for race categories 1 = TRUE 0 = FALSE
self_rep <- self_rep %>%
  mutate(
    finance_person_spouse         = str_detect(finance_person, "A spouse or partner"),
    finance_person_ex_partner     = str_detect(finance_person, "An ex-spouse or parner"),
    finance_person_parent         = str_detect(finance_person, "A parent or step-parent"),
    finance_person_sibling        = str_detect(finance_person, "A brother or sister"),
    finance_person_child          = str_detect(finance_person, "A son or daughter"),
    finance_person_other_relative = str_detect(finance_person, "Another relative"),
    finance_person_coworker       = str_detect(finance_person, "A coworker"),
    finance_person_neighbor       = str_detect(finance_person, "A neighbor"),
    finance_person_friend         = str_detect(finance_person, "A friend"),
    finance_person_non_relative   = str_detect(finance_person, "Some other non-relative"),
    finance_person_dont_know      = str_detect(finance_person, "Donâ€™t know"),
    finance_person_refused        = str_detect(finance_person, "Refused")
  ) |> 
  # Coerce True and False to 1 and 0
  mutate(across(finance_person_spouse:finance_person_refused, ~ as.numeric(.x))) |> 
  # Relocate the dummy variables after the original variable
  relocate(finance_person_spouse:finance_person_refused, .after = finance_person)
```

### When was the last time columns

```{r}
# Columns of interest for this code chunk
cols <- c(
  "finance_person_permission_last_time", "finance_person_forged_last_time", 
  "finance_person_tricked_last_time", "finance_person_stolen_last_time", 
  "finance_stranger_permission_last_time", "finance_stranger_forged_last_time", 
  "finance_stranger_tricked_last_time"
)

# Numeric coding for character values in each column of interest
value_labels <- c(
  "Less than 1 month ago" = 1,
  "Between 1 month and less than 3 months ago" = 2,
  "Between 3 months and less than 6 months ago" = 3,
  "Between 6 months and less than 1 year ago" = 4,
  "Between 1 year and less than 3 years ago" =5,
  "3 or more years ago" = 6, 
  "Don't know" = 7, 
  "Refused" = 9
)

# Numeric values to convert to NA in each column of interest
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "6cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
self_rep <- self_rep |> 
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  factors(cols_suffix, factor_labs_levs) |> 
  relocate_factors(cols_suffix)
```

### Number of times columns

```{r}
# Columns of interest for this code chunk
cols <- c(
  "finance_stranger_permission_times", "finance_stranger_permission_times_times", 
  "finance_stranger_forged_times", "finance_stranger_forged_times_times", 
  "finance_stranger_tricked_times", "finance_stranger_tricked_times_times"
)

# Numeric coding for character values in each column of interest
value_labels <- c(
  "1 or 2 times" = 1, 
  "Between 3 and less than 5 times" = 2,
  "Between 5 and less than 10 times" = 3,
  "Between 10 and less than 20 times" = 4, 
  "20 or more times" = 5,
  "Don't know" = 7, 
  "Refused" = 9
)

# Numeric values to convert to NA in each column of interest
na_values <- c(7, 9)

# Suffix for the version of each column with "Don't Know" and "Refused" changed
# to NA.
suffix <- "5cat"

# Labels and levels for factors (Shouldn't need to change this code)
factor_labs_levs <- value_labels[!value_labels %in% na_values]

# Column names for the version of each column with "Don't Know" and "Refused" 
# changed to NA (Shouldn't need to change this code).
cols_suffix <- paste(cols, suffix, sep = "_")

# There is some weird issue with the encoding for "Don't know". When printed to
# the screen, it looks the same to humans, but the values are encoded 
# differently under the hood and R throws an error. To fix, we are overwriting 
# all "Don't know" values to make them the same.
for (col in cols) {
  self_rep[[col]][self_rep[[col]] == "Donâ€™t know"] <- "Don't know"
}

# Prepare columns for analysis
# - Convert character values to numeric values
# - Create a version of each column with "Don't know" and "Refused" converted to NA
# - Create a factor version of each column (w/o "Don't know" and "Refused")
# - Arrange the columns as: original column, numeric column w/o "Don't know" and 
#   "Refused", and the factor version of the column.
sr <- sr |> 
  # Convert character values to numeric values
  chars_to_nums(cols, value_labels) |> 
  # Create a version of each column with "Don't know" and "Refused" converted to NA
  nums_to_nas(cols, na_values, suffix) |> 
  # Relocate new columns with NA values immediately after the original column
  relocate_na_cols(cols, suffix) |> 
  factors(cols_suffix, factor_labs_levs) |> 
  relocate_factors(cols_suffix)
```

```{r}
testthat::test_that("Check the number of rows and columns after cleaning the financial columns", {
  data_check <- dim(self_rep)
  testthat::expect_equal(data_check, c(955, 257))
})
```

### Emotional Mistreatment Variables

#### Set levels to be used with these variables

```{r}
levels_times <- c(
  "1 or 2 times", "Between 3 and less than 5 times",
  "Between 5 and less than 10 times",
  "Between 10 and less than 20 times", "20 or more times",
  "Don't know", "Refused"
)

levels_friends <- c(
  "None", "Very few (1-3)", "Some (4-6)", "A lot (7+)",
  "Don't know", "Refused"
)

levels_person_v2 <- c(
  "A stranger", "A spouse or partner", "An ex spouse or partner",
  "A parent or step-parent", "A brother or sister",
  "A son or daughter", "Another relative", "A coworker",
  "A neighbor", "A friend", "Some other non-relative",
  "Don't know", "Refused"
)
```

#### Recode categorical variables to factor variables

```{r}
self_rep <- self_rep %>%
  mutate(
    across(
      .cols = starts_with("emotional") & !ends_with("years") &
        !ends_with("times") & !ends_with("age") & !ends_with("person") &
        !ends_with("last_time") & !ends_with("friends") &
        !ends_with("person_v2"),
      .fns = ~ case_when(
        .x == "Yes" ~ 1,
        .x == "No" ~ 2,
        .x == "Don't know" ~ 7,
        .x == "Refused" ~ 9
      ),
      .names = "{col}_4cat"
    ),
    across(
      .cols = starts_with("emotional") & !ends_with("years") &
        !ends_with("times") & !ends_with("age") & !ends_with("person") &
        !ends_with("last_time") & !ends_with("friends") & !ends_with("4cat") &
        !ends_with("person_v2"),
      .fns = ~ factor(.x, levels = levels_yes_no),
      .names = "{col}_4cat_f"
    ),
    emotional_incident_person_12cat = case_when(
      emotional_incident_person == "A stranger" ~ 1,
      emotional_incident_person == "A spouse or partner" ~ 2,
      emotional_incident_person == "An ex spouse or partner" ~ 3,
      emotional_incident_person == "A parent or step-parent" ~ 4,
      emotional_incident_person == "A brother or sister" ~ 5,
      emotional_incident_person == "A son or daughter" ~ 6,
      emotional_incident_person == "Another relative" ~ 7,
      emotional_incident_person == "A coworker" ~ 8,
      emotional_incident_person == "A neighbor" ~ 9,
      emotional_incident_person == "A friend" ~ 10,
      emotional_incident_person == "Some other non-relative" ~ 11,
      emotional_incident_person == "Don't know" ~ 77,
      emotional_incident_person == "Refused" ~ 99
    ),
    emotional_incident_person_12cat_f = factor(
      emotional_incident_person,
      levels = levels_person_v2
    ),
    across(
      .cols = starts_with("emotional") & ends_with("last_time"),
      .fns = ~ case_when(
        .x == "Less than 1 month ago" ~ 1,
        .x == "Between 1 month and less than 3 months ago" ~ 2,
        .x == "Between 3 months and less than 6 months ago" ~ 3,
        .x == "Between 6 months and less than 1 year ago" ~ 4,
        .x == "Between 1 year and less than 3 years ago" ~ 5,
        .x == "3 or more years ago" ~ 6,
        .x == "Don't know" ~ 7,
        .x == "Refused" ~ 9
      ),
      .names = "{col}_8cat"
    ),
    across(
      .cols  = starts_with("emotional") & ends_with("last_time"),
      .fns   = ~ factor(.x, levels = levels_last_time),
      .names =  "{col}_8cat_f"
    ),
    across(
      .cols = starts_with("emotional") & ends_with("times") &
        !ends_with("times_times"),
      .fns = ~ case_when(
        .x == "1 or 2 times" ~ 1,
        .x == "Between 3 and less than 5 times" ~ 2,
        .x == "Between 5 and less than 10 times" ~ 3,
        .x == "Between 10 and less than 20 times" ~ 4,
        .x == "20 or more times" ~ 5,
        .x == "Don't know" ~ 7,
        .x == "Refused" ~ 9
      ),
      .names = "{col}_7cat"
    ),
    across(
      .cols = starts_with("emotional") & ends_with("times") &
        !ends_with("times_times"),
      .fns = ~ factor(.x, levels = levels_times),
      .names = "{col}_7cat_f"
    ),
    emotional_person_friends_6cat = case_when(
      emotional_person_friends == "None" ~ 0,
      emotional_person_friends == "Very few (1-3)" ~ 1,
      emotional_person_friends == "Some (4-6)" ~ 2,
      emotional_person_friends == "A lot (7+)" ~ 3,
      emotional_person_friends == "Don't know" ~ 7,
      emotional_person_friends == "Refused" ~ 9
    ),
    emotional_person_friends_6cat_f = factor(
      emotional_person_friends,
      levels = levels_friends
    ),
    # Are the levels the same for v2 and v1?
    emotional_incident_person_v2_12cat = case_when(
      emotional_incident_person_v2 == "A stranger" ~ 1,
      emotional_incident_person_v2 == "A spouse or partner" ~ 2,
      emotional_incident_person_v2 == "An ex spouse or partner" ~ 3,
      emotional_incident_person_v2 == "A parent or step-parent" ~ 4,
      emotional_incident_person_v2 == "A brother or sister" ~ 5,
      emotional_incident_person_v2 == "A son or daughter" ~ 6,
      emotional_incident_person_v2 == "Another relative" ~ 7,
      emotional_incident_person_v2 == "A coworker" ~ 8,
      emotional_incident_person_v2 == "A neighbor" ~ 9,
      emotional_incident_person_v2 == "A friend" ~ 10,
      emotional_incident_person_v2 == "Some other non-relative" ~ 11,
      emotional_incident_person_v2 == "Don't know" ~ 77,
      emotional_incident_person_v2 == "Refused" ~ 99
    ),
    emotional_incident_person_v2_12cat_f = factor(
      emotional_incident_person_v2,
      levels = levels_person_v2
    ),
  )
```
 
### Physical Mistreatment Variables

#### Recode categorical variables to factor variables

```{r}
self_rep <- self_rep %>%
  mutate(
    across(
      .cols = starts_with("physical") & !ends_with("years") &
        !ends_with("times") & !ends_with("age") &
        !ends_with("last_time") & !ends_with("friends") &
        !ends_with("person_v2"),
      .fns = ~ case_when(
        .x == "Yes" ~ 1,
        .x == "No" ~ 2,
        .x == "Don't know" ~ 7,
        .x == "Refused" ~ 9
      ),
      .names = "{col}_4cat"
    ),
    across(
      .cols = starts_with("physical") & !ends_with("years") &
        !ends_with("times") & !ends_with("age") &
        !ends_with("last_time") & !ends_with("friends") & !ends_with("4cat") &
        !ends_with("person_v2"),
      .fns = ~ factor(.x, levels = levels_yes_no),
      .names = "{col}_4cat_f"
    ),
    across(
      .cols = starts_with("physical") & ends_with("last_time"),
      .fns = ~ case_when(
        .x == "Less than 1 month ago" ~ 1,
        .x == "Between 1 month and less than 3 months ago" ~ 2,
        .x == "Between 3 months and less than 6 months ago" ~ 3,
        .x == "Between 6 months and less than 1 year ago" ~ 4,
        .x == "Between 1 year and less than 3 years ago" ~ 5,
        .x == "3 or more years ago" ~ 6,
        .x == "Don't know" ~ 7,
        .x == "Refused" ~ 9
      ),
      .names = "{col}_8cat"
    ),
    across(
      .cols  = starts_with("physical") & ends_with("last_time"),
      .fns   = ~ factor(.x, levels = levels_last_time),
      .names =  "{col}_8cat_f"
    ),
    across(
      .cols = starts_with("physical") & ends_with("times") &
        !ends_with("times_times"),
      .fns = ~ case_when(
        .x == "1 or 2 times" ~ 1,
        .x == "Between 3 and less than 5 times" ~ 2,
        .x == "Between 5 and less than 10 times" ~ 3,
        .x == "Between 10 and less than 20 times" ~ 4,
        .x == "20 or more times" ~ 5,
        .x == "Don't know" ~ 7,
        .x == "Refused" ~ 9
      ),
      .names = "{col}_7cat"
    ),
    across(
      .cols = starts_with("physical") & ends_with("times") &
        !ends_with("times_times"),
      .fns = ~ factor(.x, levels = levels_times),
      .names = "{col}_7cat_f"
    ),
    physical_person_friends_6cat = case_when(
      physical_person_friends == "None" ~ 0,
      physical_person_friends == "Very few (1-3)" ~ 1,
      physical_person_friends == "Some (4-6)" ~ 2,
      physical_person_friends == "A lot (7+)" ~ 3,
      physical_person_friends == "Don't know" ~ 7,
      physical_person_friends == "Refused" ~ 9
    ),
    physical_person_friends_6cat_f = factor(
      physical_person_friends,
      levels = levels_friends
    ),
    physical_incident_person_v2_12cat = case_when(
      physical_incident_person_v2 == "A stranger" ~ 1,
      physical_incident_person_v2 == "A spouse or partner" ~ 2,
      physical_incident_person_v2 == "An ex spouse or partner" ~ 3,
      physical_incident_person_v2 == "A parent or step-parent" ~ 4,
      physical_incident_person_v2 == "A brother or sister" ~ 5,
      physical_incident_person_v2 == "A son or daughter" ~ 6,
      physical_incident_person_v2 == "Another relative" ~ 7,
      physical_incident_person_v2 == "A coworker" ~ 8,
      physical_incident_person_v2 == "A neighbor" ~ 9,
      physical_incident_person_v2 == "A friend" ~ 10,
      physical_incident_person_v2 == "Some other non-relative" ~ 11,
      physical_incident_person_v2 == "Don't know" ~ 77,
      physical_incident_person_v2 == "Refused" ~ 99
    ),
    physical_incident_person_v2_12cat_f = factor(
      physical_incident_person_v2,
      levels = levels_person_v2
    ),
    physical_person_12cat = case_when(
      physical_person == "A stranger" ~ 1,
      physical_person == "A spouse or partner" ~ 2,
      physical_person == "An ex spouse or partner" ~ 3,
      physical_person == "A parent or step-parent" ~ 4,
      physical_person == "A brother or sister" ~ 5,
      physical_person == "A son or daughter" ~ 6,
      physical_person == "Another relative" ~ 7,
      physical_person == "A coworker" ~ 8,
      physical_person == "A neighbor" ~ 9,
      physical_person == "A friend" ~ 10,
      physical_person == "Some other non-relative" ~ 11,
      physical_person == "Don't know" ~ 77,
      physical_person == "Refused" ~ 99
    ),
    physical_person_12cat_f = factor(
      physical_person,
      levels = levels_person_v2
    )
  )
```

### Sexual mistreatment variables

#### Recode categorical variables to factor variables

```{r}
self_rep <- self_rep %>%
  mutate(
    across(
      .cols = starts_with("sexual") & !ends_with("years") &
        !ends_with("times") & !ends_with("age") &
        !ends_with("last_time") & !ends_with("friends") &
        !ends_with("person_v2") & !ends_with("sexual_person"),
      .fns = ~ case_when(
        .x == "Yes" ~ 1,
        .x == "No" ~ 2,
        .x == "Don't know" ~ 7,
        .x == "Refused" ~ 9
      ),
      .names = "{col}_4cat"
    ),
    across(
      .cols = starts_with("sexual") & !ends_with("years") &
        !ends_with("times") & !ends_with("age") &
        !ends_with("last_time") & !ends_with("friends") & !ends_with("4cat") &
        !ends_with("person_v2") & !ends_with("sexual_person"),
      .fns = ~ factor(.x, levels = levels_yes_no),
      .names = "{col}_4cat_f"
    ),
    across(
      .cols = starts_with("sexual") & ends_with("last_time"),
      .fns = ~ case_when(
        .x == "Less than 1 month ago" ~ 1,
        .x == "Between 1 month and less than 3 months ago" ~ 2,
        .x == "Between 3 months and less than 6 months ago" ~ 3,
        .x == "Between 6 months and less than 1 year ago" ~ 4,
        .x == "Between 1 year and less than 3 years ago" ~ 5,
        .x == "3 or more years ago" ~ 6,
        .x == "Don't know" ~ 7,
        .x == "Refused" ~ 9
      ),
      .names = "{col}_8cat"
    ),
    across(
      .cols  = starts_with("sexual") & ends_with("last_time"),
      .fns   = ~ factor(.x, levels = levels_last_time),
      .names =  "{col}_8cat_f"
    ),
    across(
      .cols = starts_with("sexual") & ends_with("times") &
        !ends_with("times_times"),
      .fns = ~ case_when(
        .x == "1 or 2 times" ~ 1,
        .x == "Between 3 and less than 5 times" ~ 2,
        .x == "Between 5 and less than 10 times" ~ 3,
        .x == "Between 10 and less than 20 times" ~ 4,
        .x == "20 or more times" ~ 5,
        .x == "Don't know" ~ 7,
        .x == "Refused" ~ 9
      ),
      .names = "{col}_7cat"
    ),
    across(
      .cols = starts_with("sexual") & ends_with("times") &
        !ends_with("times_times"),
      .fns = ~ factor(.x, levels = levels_times),
      .names = "{col}_7cat_f"
    ),
    sexual_person_friends_6cat = case_when(
      sexual_person_friends == "None" ~ 0,
      sexual_person_friends == "Very few (1-3)" ~ 1,
      sexual_person_friends == "Some (4-6)" ~ 2,
      sexual_person_friends == "A lot (7+)" ~ 3,
      sexual_person_friends == "Don't know" ~ 7,
      sexual_person_friends == "Refused" ~ 9
    ),
    sexual_person_friends_6cat_f = factor(
      sexual_person_friends,
      levels = levels_friends
    ),
    sexual_incident_person_v2_12cat = case_when(
      sexual_incident_person_v2 == "A stranger" ~ 1,
      sexual_incident_person_v2 == "A spouse or partner" ~ 2,
      sexual_incident_person_v2 == "An ex spouse or partner" ~ 3,
      sexual_incident_person_v2 == "A parent or step-parent" ~ 4,
      sexual_incident_person_v2 == "A brother or sister" ~ 5,
      sexual_incident_person_v2 == "A son or daughter" ~ 6,
      sexual_incident_person_v2 == "Another relative" ~ 7,
      sexual_incident_person_v2 == "A coworker" ~ 8,
      sexual_incident_person_v2 == "A neighbor" ~ 9,
      sexual_incident_person_v2 == "A friend" ~ 10,
      sexual_incident_person_v2 == "Some other non-relative" ~ 11,
      sexual_incident_person_v2 == "Don't know" ~ 77,
      sexual_incident_person_v2 == "Refused" ~ 99
    ),
    sexual_incident_person_v2_12cat_f = factor(
      sexual_incident_person_v2,
      levels = levels_person_v2
    ),
    sexual_person_13cat = case_when(
      sexual_person == "A stranger" ~ 1,
      sexual_person == "A spouse or partner" ~ 2,
      sexual_person == "An ex spouse or partner" ~ 3,
      sexual_person == "A parent or step-parent" ~ 4,
      sexual_person == "A brother or sister" ~ 5,
      sexual_person == "A son or daughter" ~ 6,
      sexual_person == "Another relative" ~ 7,
      sexual_person == "A coworker" ~ 8,
      sexual_person == "A neighbor" ~ 9,
      sexual_person == "A friend" ~ 10,
      sexual_person == "Some other non-relative" ~ 11,
      sexual_person == "Don't know" ~ 77,
      sexual_person == "Refused" ~ 99
    ),
    sexual_person_13cat_f = factor(
      sexual_person,
      levels = levels_person_v2
    )
  )
```

### Fears, wants, needs variables

#### Recode categorical variables to factor variables

```{r}
self_rep <- self_rep %>%
  mutate(
    across(
      .cols = starts_with("fear") & !ends_with("response"),
      .fns = ~ case_when(
        .x == "Don't know" ~ 7,
        .x == "Refused" ~ 9
      ),
      .names = "{col}_2cat"
    ),
    across(
      .cols = starts_with("fear") & !ends_with("response") &
        !ends_with("2cat"),
      .fns = ~ factor(.x, levels = c("Don't know", "Refused")),
      .names = "{col}_2cat_f"
    )
  )
```

### Environment Variables

#### Recode categorical variables to factor variables

```{r}
self_rep <- self_rep %>%
  mutate(
    report_private_5cat = case_when(
      report_private == "Yes, for the entire time" ~ 1,
      report_private == "Yes, for part of the time" ~ 2,
      report_private == "No, but they were still close enough to hear" ~ 3,
      report_private == "No" ~ 4,
      report_private == "Don't know" ~ 7
    ),
    report_private_5cat_f = factor(
      report_private,
      levels = c(
        "Yes, for the entire time", "Yes, for part of the time",
        "No, but they were still close enough to hear", "No",
        "Don't know"
      )
    ),
    report_influence_4cat = case_when(
      report_influence == "Yes" ~ 1,
      report_influence == "No" ~ 2,
      report_influence == "Don't know" ~ 7,
      report_influence == "Refused" ~ 9
    ),
    report_influence_4cat_f = factor(
      report_influence,
      levels = levels_yes_no
    )
  )
```

## Remove raw character variables that have recoded forms

```{r}
self_rep <- self_rep %>% select(
  -c(
    (starts_with("emotional") & (!matches("[0-9]cat") & !matches("_age") & !matches("_times_times"))),
    (starts_with("fear") & (!matches("[0-9]cat") & !matches("_response$"))),
    (starts_with("finance") & (!matches("[0-9]cat") & !matches("_age") & !matches("_times_times"))),
    (starts_with("neglect") & (!matches("[0-9]cat") & !matches("_age") & !matches("_times_times"))),
    (starts_with("physical") & (!matches("[0-9]cat") & !matches("_age") & !matches("_times_times"))),
    (starts_with("report") & !matches("[0-9]cat")),
    (starts_with("sexual") & (!matches("[0-9]cat") & !matches("_age") & !matches("_times_times")))
  )
)
```

```{r}
# Data check
dim(self_rep) # 955 351
```


# Save as rds file

```{r}
self_rep_path <- here::here("data", "cleaned_rds_files", "self_report_import.rds")
```

```{r}
readr::write_rds(self_rep, self_rep_path)
```


# Clean up

```{r}
rm(list = ls())
```
